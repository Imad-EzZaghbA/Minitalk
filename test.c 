# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    test.c                                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: iez-zagh <iez-zagh@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/01/21 00:05:54 by iez-zagh          #+#    #+#              #
#    Updated: 2024/01/22 16:16:44 by iez-zagh         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "minitalk.h"

int	checker(unsigned char rec_char)
{
	int	u;
	int	i;
	int	j;

	j = 7;
	i = 0;
	while(j > 3)
	{
		u = (rec_char >> j) & 1;
		if (u == 0)
			return (0);
		j--;
		u = (rec_char >> j) & 1;
		if (u == 0)
			return (7-j);
	}
	return (0);
}

static int	i1 = 0;

void	checker2(int j, unsigned char rec_char, int *i)
{
	static unsigned char res[4];

	if (j > 0)
	{
		res[i1] = rec_char;
		i1++;
		*i = 0;
	}
	else
	{
		res[i1] = '\0';
		ft_printf("%s", res);
		i1 = 0;
		*i = 0;
	}
}

void	check_for_char(int client_pid, unsigned char rec_char)
{
	static int	i = 0;
	static int	j = 0;

	if (j == 0)
		j = checker(rec_char);
	else if (j >= 0)
	{
		checker2(j ,rec_char, &i);
		j--;
	}
	else if (rec_char == '\0')
	{
		if (kill(client_pid, SIGUSR1) == -1)
		{
			ft_printf("some thing went wrong\n!!");
			exit(EXIT_FAILURE);
		}
	}
	else if (j == 0)
	{
		ft_printf("%c", rec_char);
		i = 0;
	}
}

void	signal_handling(int signal, siginfo_t *info_of_pro, void *just)
{
	static int my_para para = {0, }

	just = NULL;
	if (!client_pid)
		client_pid = info_of_pro->si_pid;
	current_pid = info_of_pro->si_pid;
	if (current_pid != client_pid)
	{
		client_pid = current_pid;
		i = 0;
		i1 = 0;
		rec_char = 0;
	}
	rec_char |= (signal == SIGUSR1) << (7 - i);
	i++;
	if (i == 8)
	{
		check_for_char(client_pid, rec_char);
		i = 0;
		rec_char = 0;
	}
}

int	main(void)
{
	int					pid;
	struct sigaction	act;

	pid = getpid();
	ft_printf("the PID: %d\n", pid);
	act.sa_sigaction = signal_handling;
	sigemptyset(&act.sa_mask);
	act.sa_flags = SA_SIGINFO;
	if (sigaction(SIGUSR1, &act, 0) == -1
		|| sigaction(SIGUSR2, &act, 0) == -1)
	{
		perror("oops, some thing went !!");
		return (1);
	}
	while (1)
		pause();
	return (0);
}